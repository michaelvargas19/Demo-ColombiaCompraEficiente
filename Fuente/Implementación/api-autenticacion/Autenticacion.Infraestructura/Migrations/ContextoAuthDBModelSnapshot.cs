// <auto-generated />
using System;
using Autenticacion.Infraestructura;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Autenticacion.Infraestructura.Migrations
{
    [DbContext(typeof(ContextoAuthDB))]
    partial class ContextoAuthDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.AlgoritmoDeSeguridad", b =>
                {
                    b.Property<string>("Algoritmo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IndHabilitado")
                        .HasColumnType("bit");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Algoritmo");

                    b.ToTable("AspNetAlgoritmosDeSeguridad");

                    b.HasData(
                        new
                        {
                            Algoritmo = "EcdsaSha256",
                            IndHabilitado = true,
                            Valor = "ES256"
                        },
                        new
                        {
                            Algoritmo = "EcdsaSha384",
                            IndHabilitado = true,
                            Valor = "ES384"
                        },
                        new
                        {
                            Algoritmo = "EcdsaSha512",
                            IndHabilitado = true,
                            Valor = "ES512"
                        },
                        new
                        {
                            Algoritmo = "HmacSha384",
                            IndHabilitado = true,
                            Valor = "HS384"
                        },
                        new
                        {
                            Algoritmo = "HmacSha512",
                            IndHabilitado = true,
                            Valor = "HS512"
                        },
                        new
                        {
                            Algoritmo = "None",
                            IndHabilitado = true,
                            Valor = "none"
                        },
                        new
                        {
                            Algoritmo = "RsaSha256",
                            IndHabilitado = true,
                            Valor = "RS256"
                        },
                        new
                        {
                            Algoritmo = "RsaSha384",
                            IndHabilitado = true,
                            Valor = "RS384"
                        },
                        new
                        {
                            Algoritmo = "RsaSha512",
                            IndHabilitado = true,
                            Valor = "RS512"
                        },
                        new
                        {
                            Algoritmo = "RsaSsaPssSha256",
                            IndHabilitado = true,
                            Valor = "PS256"
                        },
                        new
                        {
                            Algoritmo = "RsaSsaPssSha384",
                            IndHabilitado = true,
                            Valor = "PS384"
                        },
                        new
                        {
                            Algoritmo = "RsaSsaPssSha512",
                            IndHabilitado = true,
                            Valor = "PS512"
                        },
                        new
                        {
                            Algoritmo = "Aes128CbcHmacSha256",
                            IndHabilitado = true,
                            Valor = "A128CBC-HS256"
                        },
                        new
                        {
                            Algoritmo = "HmacSha256",
                            IndHabilitado = true,
                            Valor = "HS256"
                        },
                        new
                        {
                            Algoritmo = "Aes192CbcHmacSha384",
                            IndHabilitado = true,
                            Valor = "A192CBC-HS384"
                        },
                        new
                        {
                            Algoritmo = "Aes128KW",
                            IndHabilitado = true,
                            Valor = "A128KW"
                        },
                        new
                        {
                            Algoritmo = "Aes256KW",
                            IndHabilitado = true,
                            Valor = "A256KW"
                        },
                        new
                        {
                            Algoritmo = "RsaOAEP",
                            IndHabilitado = true,
                            Valor = "RSA-OAEP"
                        },
                        new
                        {
                            Algoritmo = "Sha256",
                            IndHabilitado = true,
                            Valor = "SHA256"
                        },
                        new
                        {
                            Algoritmo = "Sha384",
                            IndHabilitado = true,
                            Valor = "SHA384"
                        },
                        new
                        {
                            Algoritmo = "Sha512",
                            IndHabilitado = true,
                            Valor = "SHA512"
                        },
                        new
                        {
                            Algoritmo = "RsaPKCS1",
                            IndHabilitado = true,
                            Valor = "RSA1_5"
                        },
                        new
                        {
                            Algoritmo = "Aes256CbcHmacSha512",
                            IndHabilitado = true,
                            Valor = "A256CBC-HS512"
                        });
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.Aplicacion", b =>
                {
                    b.Property<string>("IdAplicacion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlgoritmoDeSeguridad")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmailContacto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<bool>("EstadoLlave")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaExpiracionLlave")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IndHabilitado")
                        .HasColumnType("bit");

                    b.Property<string>("LlaveSecreta")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MinutosDeVida")
                        .HasColumnType("float");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PermiteJWT")
                        .HasColumnType("bit");

                    b.Property<string>("URLNuevoUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URLUpdateUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAplicacion");

                    b.HasIndex("AlgoritmoDeSeguridad");

                    b.ToTable("AspNetAplicacion");

                    b.HasData(
                        new
                        {
                            IdAplicacion = "Manager",
                            AlgoritmoDeSeguridad = "HmacSha512",
                            EmailContacto = "michavarg9@gmail.com",
                            Estado = true,
                            EstadoLlave = true,
                            FechaExpiracionLlave = new DateTime(2023, 11, 3, 21, 3, 8, 791, DateTimeKind.Local).AddTicks(7133),
                            IndHabilitado = true,
                            LlaveSecreta = "XYyZhvxK6T5xJO1dfiDOPrE5ZOldILWAGx5aStCYPpv5p495p2TRaoOSSU9Ddm6PvlFu6LUL3ttIUy9K5UHvvGqncNpvZW3c7zUfOpdqnZWl53bEVBwUe8dGbvJ9BSRTA4gDP9UT5ZHoiMw07wvzLcpsybShy1eKl1IGb1nmkGwHJl5EHYYrWCon6GCF30wv3v8jT0fmRY9AxbsRHGWc4ECQe9uy4vtUb0iUzD9vuqQWzxRpkwpptxjDqqBv3Qzy",
                            MinutosDeVida = 12.0,
                            Nombre = "Account Service",
                            PermiteJWT = true,
                            URLNuevoUsuario = "",
                            URLUpdateUsuario = ""
                        });
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.PlantillaEmail", b =>
                {
                    b.Property<int>("IdPlantilla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdAplicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IndHabilitado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Plantilla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idTipoPlantilla")
                        .HasColumnType("int");

                    b.Property<int>("idUsuarioCrea")
                        .HasColumnType("int");

                    b.Property<int?>("idUsuarioModifica")
                        .HasColumnType("int");

                    b.HasKey("IdPlantilla");

                    b.HasIndex("idUsuarioCrea");

                    b.HasIndex("idUsuarioModifica");

                    b.ToTable("usuPlantillaEmail");

                    b.HasData(
                        new
                        {
                            IdPlantilla = 1,
                            Descripcion = "Estructura usada para solicitar la confirmación de la cuenta via email",
                            FechaCreacion = new DateTime(2021, 11, 3, 21, 3, 8, 794, DateTimeKind.Local).AddTicks(9215),
                            IdAplicacion = "Manager",
                            IndHabilitado = true,
                            Nombre = "Notificación de registro",
                            Plantilla = "<!DOCTYPE html><html><head><meta http-equiv=\"Content - Type\" content=\"text / html; charset = utf - 8\" ><title>Mozilla</title></head><body>Usuario: $Usuario Enlace: $Enlace</body></html>",
                            idTipoPlantilla = 1,
                            idUsuarioCrea = 1
                        },
                        new
                        {
                            IdPlantilla = 2,
                            Descripcion = "Estructura usada para notificar al usuario la confirmación de email",
                            FechaCreacion = new DateTime(2021, 11, 3, 21, 3, 8, 795, DateTimeKind.Local).AddTicks(559),
                            IdAplicacion = "Manager",
                            IndHabilitado = true,
                            Nombre = "Notificación de confirmación",
                            Plantilla = "",
                            idTipoPlantilla = 2,
                            idUsuarioCrea = 1
                        },
                        new
                        {
                            IdPlantilla = 3,
                            Descripcion = "Estructura usada para notificar al usuario el enlace para la recuperación de cuenta",
                            FechaCreacion = new DateTime(2021, 11, 3, 21, 3, 8, 795, DateTimeKind.Local).AddTicks(637),
                            IdAplicacion = "Manager",
                            IndHabilitado = true,
                            Nombre = "Notificación de enlace para recuperación",
                            Plantilla = "",
                            idTipoPlantilla = 3,
                            idUsuarioCrea = 1
                        },
                        new
                        {
                            IdPlantilla = 4,
                            Descripcion = "Estructura usada para notificar al usuario el cambio exitoso de contraseña",
                            FechaCreacion = new DateTime(2021, 11, 3, 21, 3, 8, 795, DateTimeKind.Local).AddTicks(660),
                            IdAplicacion = "Manager",
                            IndHabilitado = true,
                            Nombre = "Notificación de cambio de contraseña",
                            Plantilla = "",
                            idTipoPlantilla = 4,
                            idUsuarioCrea = 1
                        });
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdAplicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IndHabilitado")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdAplicacion");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "4489e762-6a2e-4bfd-9574-b34058a1869e",
                            Descripcion = "Usuario con permisos Full",
                            Display = "PowerUser",
                            IdAplicacion = "Manager",
                            IndHabilitado = true,
                            Name = "PowerUser",
                            NormalizedName = "POWERUSER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "1042f7b1-87e4-41a4-97f9-b5c76ada82c5",
                            Descripcion = "Usuario con permisos de Admin",
                            Display = "Administrador",
                            IdAplicacion = "Manager",
                            IndHabilitado = true,
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "40968329-d9de-43bb-b746-06c7c501781c",
                            Descripcion = "Cliente del sistema",
                            Display = "Cliente",
                            IdAplicacion = "Manager",
                            IndHabilitado = true,
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "fb5da651-2faf-4320-83ba-c59d72d36f92",
                            Descripcion = "Proveedor del sistema",
                            Display = "Proveedor",
                            IdAplicacion = "Manager",
                            IndHabilitado = true,
                            Name = "Proveedor",
                            NormalizedName = "PROVEEDOR"
                        });
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.TipoAutenticacion", b =>
                {
                    b.Property<int>("IdTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Autenticacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsDirectorioActivo")
                        .HasColumnType("bit");

                    b.Property<int?>("IdAD")
                        .HasColumnType("int");

                    b.Property<bool>("IndHabilitado")
                        .HasColumnType("bit");

                    b.HasKey("IdTipo");

                    b.ToTable("AspNetTiposAutenticacion");

                    b.HasData(
                        new
                        {
                            IdTipo = 1,
                            Autenticacion = "Contraseña",
                            EsDirectorioActivo = false,
                            IndHabilitado = true
                        });
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.TipoDocumento", b =>
                {
                    b.Property<int>("IdTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<bool>("indHabilitado")
                        .HasColumnType("bit");

                    b.HasKey("IdTipo");

                    b.ToTable("usuTipoDocumento");

                    b.HasData(
                        new
                        {
                            IdTipo = 1,
                            Codigo = "AS",
                            Descripcion = "",
                            Nombre = "Adulto sin identificación",
                            Orden = 10,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 2,
                            Codigo = "CD",
                            Descripcion = "",
                            Nombre = "Carnet diplomático",
                            Orden = 10,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 3,
                            Codigo = "CC",
                            Descripcion = "",
                            Nombre = "Cédula de ciudadanía",
                            Orden = 1,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 4,
                            Codigo = "CE",
                            Descripcion = "",
                            Nombre = "Cédula de extranjería",
                            Orden = 2,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 5,
                            Codigo = "CN",
                            Descripcion = "",
                            Nombre = "Certificado de nacido vivo",
                            Orden = 10,
                            indHabilitado = false
                        },
                        new
                        {
                            IdTipo = 6,
                            Codigo = "DE",
                            Descripcion = "",
                            Nombre = "Documento extranjero",
                            Orden = 4,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 7,
                            Codigo = "MS",
                            Descripcion = "",
                            Nombre = "Menor sin identificación",
                            Orden = 10,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 8,
                            Codigo = "NIT",
                            Descripcion = "",
                            Nombre = "NIT",
                            Orden = 5,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 9,
                            Codigo = "PA",
                            Descripcion = "",
                            Nombre = "Pasaporte",
                            Orden = 6,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 10,
                            Codigo = "PE",
                            Descripcion = "",
                            Nombre = "Permiso especial de permanencia",
                            Orden = 10,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 11,
                            Codigo = "RC",
                            Descripcion = "",
                            Nombre = "Registro civil",
                            Orden = 10,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 12,
                            Codigo = "SC",
                            Descripcion = "",
                            Nombre = "Salvoconducto",
                            Orden = 10,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 13,
                            Codigo = "SI",
                            Descripcion = "",
                            Nombre = "Sin identificación",
                            Orden = 10,
                            indHabilitado = true
                        },
                        new
                        {
                            IdTipo = 14,
                            Codigo = "TI",
                            Descripcion = "",
                            Nombre = "Tarjeta de identidad",
                            Orden = 7,
                            indHabilitado = true
                        });
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.TipoPlantillaEmail", b =>
                {
                    b.Property<int>("IdTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IndHabilitado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IdTipo");

                    b.ToTable("usuTipoPlantillaEmail");

                    b.HasData(
                        new
                        {
                            IdTipo = 1,
                            Descripcion = "Usada para notificar el registro de un nuevo usuario",
                            FechaCreacion = new DateTime(2021, 11, 3, 21, 3, 8, 794, DateTimeKind.Local).AddTicks(6860),
                            IndHabilitado = true,
                            Nombre = "Solicitud de confirmación"
                        },
                        new
                        {
                            IdTipo = 2,
                            Descripcion = "Usada para notificar la confirmación de cuenta",
                            FechaCreacion = new DateTime(2021, 11, 3, 21, 3, 8, 794, DateTimeKind.Local).AddTicks(7729),
                            IndHabilitado = true,
                            Nombre = "Confirmación de Cuenta"
                        },
                        new
                        {
                            IdTipo = 3,
                            Descripcion = "Usada para enviar el enlace de recuperación de cuenta",
                            FechaCreacion = new DateTime(2021, 11, 3, 21, 3, 8, 794, DateTimeKind.Local).AddTicks(7773),
                            IndHabilitado = true,
                            Nombre = "Recuperar Cuenta"
                        },
                        new
                        {
                            IdTipo = 4,
                            Descripcion = "Usada para notificar el cambio de contraseña",
                            FechaCreacion = new DateTime(2021, 11, 3, 21, 3, 8, 794, DateTimeKind.Local).AddTicks(7793),
                            IndHabilitado = true,
                            Nombre = "Cambio de Contraseña"
                        });
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.Token", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Transaccion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaValidacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirmaJWT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdAplicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IndHabilitado")
                        .HasColumnType("bit");

                    b.Property<int>("LongitudCodigo")
                        .HasColumnType("int");

                    b.Property<int>("MinutosDeVida")
                        .HasColumnType("int");

                    b.Property<bool>("Validado")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name", "Transaccion");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("EsExterno")
                        .HasColumnType("bit");

                    b.Property<int>("IdTipoAuth")
                        .HasColumnType("int");

                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IndHabilitado")
                        .HasColumnType("bit");

                    b.Property<string>("IndicativoFijo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndicativoMovil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Organizacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegundoNombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("idTipoDocumento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoAuth");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("idTipoDocumento");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Cargo = "Administrador del sistema",
                            ConcurrencyStamp = "9dfe1c2a-0f95-48e4-ad8f-114c4c9c99c7",
                            Descripcion = "Administrador del sistema de autenticación",
                            Email = "admin@admin.org.co",
                            EmailConfirmed = true,
                            EsExterno = false,
                            IdTipoAuth = 1,
                            IndHabilitado = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.ORG.CO",
                            NormalizedUserName = "ADMIN",
                            Organizacion = "PUJ",
                            PasswordHash = "AQAAAAEAACcQAAAAEDvsJrU5P2uO7jfhKVQTK2rMCwYlOAoWC3AzIGB+iktmo8A2515Utzul5+KXfWEjqQ==",
                            PhoneNumberConfirmed = false,
                            PrimerApellido = "Admin",
                            PrimerNombre = "User",
                            SecurityStamp = "XVMFBE37LCN4TNGMZSHLPHBV7FIVHBQG",
                            SegundoApellido = "Default",
                            SegundoNombre = "",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth._LogAutenticacionAPI", b =>
                {
                    b.Property<long>("IdLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aplicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsExcepcion")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parametros")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLog");

                    b.ToTable("_LogAutenticacionAPI");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/system",
                            ClaimValue = "Manager",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/system",
                            ClaimValue = "Manager",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/system",
                            ClaimValue = "Manager",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/system",
                            ClaimValue = "Manager",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/authenticationmethod",
                            ClaimValue = "Contraseña",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/streetaddress",
                            ClaimValue = "",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/uri",
                            ClaimValue = "",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/locality",
                            ClaimValue = "",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.Aplicacion", b =>
                {
                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.AlgoritmoDeSeguridad", "Algoritmo")
                        .WithMany("Aplicaciones")
                        .HasForeignKey("AlgoritmoDeSeguridad");

                    b.Navigation("Algoritmo");
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.PlantillaEmail", b =>
                {
                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.Usuario", "UsuarioCrea")
                        .WithMany()
                        .HasForeignKey("idUsuarioCrea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.Usuario", "UsuarioModifica")
                        .WithMany()
                        .HasForeignKey("idUsuarioModifica");

                    b.Navigation("UsuarioCrea");

                    b.Navigation("UsuarioModifica");
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.Rol", b =>
                {
                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.Aplicacion", "Aplicacion")
                        .WithMany("Roles")
                        .HasForeignKey("IdAplicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplicacion");
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.Token", b =>
                {
                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.Usuario", b =>
                {
                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.TipoAutenticacion", "TipoAutenticacion")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdTipoAuth")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("idTipoDocumento");

                    b.Navigation("TipoAutenticacion");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autenticacion.Infraestructura.Entities.Auth.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.AlgoritmoDeSeguridad", b =>
                {
                    b.Navigation("Aplicaciones");
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.Aplicacion", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.Entities.Auth.TipoAutenticacion", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
